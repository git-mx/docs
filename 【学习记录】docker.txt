01.据说docker必须安装在拥有3.10及以上内核的宿主机上，先检查内核版本 uname -r
02.使用yum install docker
03.使用systemctl start docker 启动docker
04.查看docker版本 docker -v 如果出现版本信息则表示安装成功
05.设置开机启动docker服务 systemctl enable docker
06.在网站https://hub.docker.com/r/library/tomcat/查看docker所支持的tomcat版本
07.在docker里安装tomcat镜像 docker pull tomcat:8.5.38
08.查看本地所有的镜像 docker images  
   删除某一个镜像 docker rmi IMAGE_ID
   如果删除的时候报image is referenced in multiple repositories这个错误
   那么就是用docker rmi tomcat:latest（latest是tomcat的版本号）就可以删除一个引用
   删除所有镜像 docker rmi `docker images -q`
09.基于镜像创建一个容器 docker run --name tomcat80 -p 80:8080 tomcat，
  这里的80表示宿主机的端口号，8080是容器的端口号，意思就是把宿主机的80端口映射到容器自身的8080端口
  如果是部署web项目，那么conf/server.xml里面配置的端口号一定要与容器映射的端口号（这里是8080）一样。
  这时创建的容器是没有启动的。
10.查看运行的容器 docker ps -a 如果不加-a参数表示只查看正在运行的参数
11.启动一个已经存在的容器 docker start cid(假设是b83) b83是CONTAINER_ID的前面几位，不一定要全部输入
12.这时再用docker ps命令查看容器已经在运行了，这时可以在宿主机使用 curl localhost:80来测试是否启动成功
13.查看防火墙状态，并将宿主机的80端口映射出去，具体命令见CentOS7命令，如果是腾讯或者阿里的云服务器，还
   需要去对应厂商的控制台设置端口映射。端口放出之后就可以通过外网ip来访问部署在容器里的web项目了
14.部署web应用到对应的tomcat容器，首先可以使用 docker inspect -f '{{.Id}}' tomcat80 来查看容器的完整ID
15.使用docker exec -it b83 /bin/bash 进入容器系统（容器实际上就是一个虚拟机系统），它的内部文件结构大致
   与CentOS一致，都拥有/usr、/etc、等这些目录，和LINUX系统一样，可以使用cd命令来进入不同的目录
   进入tomcat容器之后的默认路径是 /usr/local/tomcat
16.在容器内的任何目录都可以使用exit命令退出容器回到宿主机
17.cd webapps rm -rf * 删除webapps下的所有文件，然后cd conf rm server.xml 删除server.xml
18.使用exit 命令退出到宿主机，然后使用 cp /AAAA/BBBB/server.xml b83:/usr/local/tomcat/conf 命令将server.xml
   文件拷贝到tomcat容器的/usr/local/tomcat/conf目录下。同理将ROOT.war包拷贝到/usr/local/tomcat/webapps目录下，
   在容器内是无法配置免项目名访问的，想要免项目名访问只有一个办法，那就是把war包命名成ROOT.war。
19.另外在容器中是无法识别localhost的，以为在容器内部的localhost相当于是容器系统的localhost，无法访问宿主机的
   资源了。因此在我部署我的项目的时候MYSQL的连接地址使用的是外网地址，本来想使用127.0.0.1的，结果也不行，就算
   在宿主机部署tomcat使用127.0.0.1连接MYSQL也没成功过，目前还不知道具体原因。
20.在把war包拷贝到容器之后，容器就会自动启动web项目，如果想查看是否启动成功，可以在自己的代码里自定义日志位置，
   例如我定义的是/usr/local/tomcat/shyfay-admin.log.这时就可以使用tail命令或者vim命令查看日志输出了
21.容器就是一个虚拟机系统，它内部也是许多软件都是缺失的，需要我们手动安装，例如如下安装vim编辑器的命令
   apt-get update
   apt-get install vim
22.部署成功之后把端口映射出去就可以在外网通过域名来访问部署在docker容器中的web项目了，大功告成。
23.当我们查看日志的时候会发现一个问题就是，日志的日期不是系统当前时间，这是因为容器的默认市区是世界标准时区，
   我们可以通过相应的操作来修改这个时区，有几种方式来纠正时区问题
   A）将宿主机的时区文件复制到容器 docker cp /etc/localtime b83:/etc/
   这种方式虽然能够改正容器的时区，但是tomcat输出的日志还是UTC标准时区的时间，这是因为tomcat的时区不是与容器
   一样的，而是与JMV启动时，JVM采用的时区保持一致。这样就需要在创建容器时就指定时区了
   B）创建容器时指定宿主机时区 docker run -it -d --name tomcat80 -v /etc/localtime:/etc/localtime:ro tomcat
    上面句不生效，用下面的
    docker run --name tomcat80 -p 8800:8080 -e TZ="Asia/Shanghai" -v /etc/localtime:/etc/localtime tomcat
24.以下附上在docker中部署可以通过域名和免项目名访问的server.xml。（免端口的方法是直接将tomcat容器映射到宿主机的80端口即可）
   见server-docker.xml
docker常用命令
删除一个容器使用docker rm  -f b83 来删除，-f表示强制的意思，即可以删除正在运行的容器。
删除所有容器（包括运行中的容器） docker rm -f `docker ps -a -q`
我们可以将docker容器粗暴的比拟为一个虚拟机，在创建docker容器的时候可以指定每个docker
容器所占用的物理内存和swap内存。

docker的三大组件：仓库（类似于GIT的仓库，拥有公有仓库和私有仓库）、
                  镜像（例如我们的tomcat镜像就是从公共镜像池下载的）
				  容器
什么是docker: docker是依托于linux内核功能的虚拟化技术。
docker有什么好处：
docker的核心理念就是build once,run anywhere
1.交付物标准化，所谓交付物标准化的意思就是，让交付应用所需要的资源、配置项、操作动作等都标准
  在传统虚拟机或者物理机里面部署一个tomcat的web项目你可能需要做的是：下载和安装JVM、下载和安装TOMCAT、
  然后去配置环境变量。但是使用docker只需要一个镜像就能搞定。
2.一次构建，多次交付。当涉及到应用程序多副本部署或者应用程序迁移时，最能体现docker的价值。
      （例如web服务集群、MYSQL集群部署、REDIS集群等），或者想换一台机器了，就可以使用导入和导出的方式来搬运容器
3.应用隔离，Docker容器可以隔离不同应用程序之间的相互影响，但是比虚拟机开销更小。例如隔离MYSQL环境和WEB环境的配置变量。
4.方便构建基于SOA架构或者微服务架构的系统，通过服务编排，更好地松耦合。

docker安装和使用jetty
使用docker pull jetty安装镜像
然后使用 docker run --name jetty80 -d -p 80:8080 -p 433:8433 jetty 安装容器
命令的意思是将宿主机的80端口映射到容器的8080端口，将宿主机的433端口映射到容器的8433端口

docker安装rabbitMQ 
docker run -d --hostname rabbit5672 -p 5672:5672 -p 15672:15672 rabbitmq:3.7.3-management
在docker中部署eureka集群 https://www.cnblogs.com/520playboy/p/7929500.html

		https://www.jianshu.com/p/97b075ee603c
        制作单个docker镜像 https://blog.csdn.net/michael_hm/article/details/79280720
		
		
JAVA_HOME=/usr/local/java/jdk1.8.0_192

将eureka部署到docker容器中
1.首先创建eureka项目并配置号端口号8761（一定要记住这个端口号）
2.其次使用mvn -clean package将项目打包成jar包
3.将jar包拷贝到LINUX系统的/home/eureka中
4.在/home/eureka中创建一个dockerfile 直接用vim dockerfile创建
5.在dockerfile文件中输入如下内容
  FROM openjdk:8-jdk-alpine  这是源镜像，我们采用jdk作为源镜像是为了构建JAVA的运行环境
  VOLUME /home/eureka        指定dockerfile所在的目录还是什么的，目前还不清楚
  add eureka-1.0-SNAPSHOT.jar /.app.jar 复制jar包，这里的源jar包不一定是在当前路径下
  ENTRYPOINT ["java", "-jar", "app.jar"] 让容器启动时使用java命令运行java启动我们的eureka服务
6.然后使用命令 docker build -t eureka-server . 创建镜像
  如果中途报下载openjdk超时可以重新执行该命令
7.启动容器 docker run --name eureka80 -p 宿主机端口:容器端口 eureka-server
  这时会看到spring启动的日志
8.注意每次重启防火墙都可能会导致docker服务不可用，这时可以先把容器关掉再打开就可以了
8.构建eureka服务器集群 https://www.jianshu.com/p/97b075ee603c 

批量操作容器和镜像 https://blog.csdn.net/wzygis/article/details/80547285
docker里面的服务是不能通过127.0.0.1或者localhost来访问宿主机的服务的，只能通过外网IP地址或者域名
使用ifconfig可以查看docker容器的ip地址
docker容器在启动时，加上  --network host 这个命令来设置让docker容器和宿主机保持在同一网段，这样docker容器就可以使用localhost和127.0.0.1来访问宿主机了
Docker容器运行的时候有 host 、 bridge 、 none 三种网络可供配置。
默认是 bridge ，即桥接网络，以桥接模式连接到宿主机； host 是宿主网络，即与宿主机共用网络； none 则表示无网络，容器将无法联网。
windows下安装docker,需要安装一个额外的东西，百度一下windows下安装docker
安装好之后在开始-所有程序里面有一个Docker文件夹，里面会有一个Docker QuckStart Terminal，使用这个我们就可以执行linux命令了，并且这里面可以运行docker的命令

docker私服
	注册或登录阿里云在产品与服务里面找到容器镜像服务并进入，然后添加命名空间，之后添加镜像仓库，
	值得注意的是，这里的一个镜像仓库实际上就是一个镜像，例如我们新建一个eureka镜像，选择好命名空间和地域，填写好仓库名称 eureka 
	仓库类型选择私有、摘要随便填写然后点击下一步，在接下来的页面中勾选代码变更自动构建镜像、代码源处选择本地仓库，这时镜像仓库就创建好了
	创建好镜像仓库后，返回到仓库列表页面，选中eureka那一条右边的操作列中的管理可以看到登录阿里云的命令
	这时，我们回到自己的编写代码的机器，需要做如下才做来将本地的项目构建成镜像并推到阿里云镜像仓库
	- B 在项目根目录下执行mvn clean package -U 重新构建jar包，-U是强制更新
	- A 在eureka项目中创建Dockerfile文件（注意这个文件不需要后缀名）,文件内容如下
	  FROM  hub.c.163.com/library/java:8-alpine 因为eureka是一个Java服务，所以肯定需要java的运行环境，这一句话的意思就是这个容器是以java为基础的
												那么这个地址去哪里找呢，国内都推荐去网易云的镜像仓库去拿，
												具体操作是进入网易云-产品-镜像仓库-镜像中心-搜索java-选中library/java并点击-选择版本标签-选择一个合适的版本
												然后复制右上角的 hub.c.163.com/library/java:latest 这一段内容并将lastest改成自己的java版本，比如我们选择的是8-alpine
	  ADD target/*.jar app.jar  意思就是把eureka项目中target目录下的jar包添加到镜像中
	  EXPOSE 8761 设置镜像端口
	  ENTRYPOINT ["java", "-jar", "app.jar"] 让镜像执行java -jar 命令运行eureka服务
	- C 假设编写代码的机器已经安装的docker ,那么在docker里面执行以下命令登录阿里云的镜像仓库
	  docker login --username=大叔在路上1988 registry.cn-shenzhen.aliyuncs.com
	  这个命令的后半段就是在阿里云仓库-管理里面的内容了
	- D 使用以下命令构建镜像 docker build -t registry.cn-shenzhen.aliyuncs.com/springcloud-namespace/eureka .
	  registry.cn-shenzhen.aliyuncs.com/springcloud-namespace/eureka这一段内容复制的是阿里云仓库-管理里面的docker push命令后面的那一段内容
	- C 使用以下命令将镜像推送到镜像仓库 docker push registry.cn-shenzhen.aliyuncs.com/springcloud-namespace/eureka
  	通过以上步骤，已经把本地的项目构建成镜像并推送到阿里云镜像仓库了，接下来就是在rancher中拉取镜像构建服务
	编写build.sh脚本文件用于构建镜像并推送到私服，build.sh脚本的内容如下
	#!/usr/bin/env/ bash
	mvn clean package -Dmaven.test.skip=true -U
	docker build -t registry.cn-shenzhen.aliyuncs.com/springcloud-namespace/config .
	docker login --username=大叔在路上1988 registry.cn-shenzhen.aliyuncs.com
	docker push registry.cn-shenzhen.aliyuncs.com/springcloud-namespace/config
	注意，在windows下执行build.sh这个shell脚本，需要使用Docker QuickStart Terminal这个客户端里面执行bash build.sh，执行完之后如果有问题，控制台会输出问题的信息
	解决好问题之后再次执行bash build.sh这个命令重新推送，成功之后控制台最后一行会显示这个镜像在私服上的版本
	遗留问题：shell脚本编程
	
	
rancher
	- 准备工作，首先需要知道rancher1.6的api：进入到rancher的网关 http://www.rancher.com拉到最底部找到Docs-Rancher 1.6 Docs
	  另外Rancher需要两台不同的服务器，一台Rancher Server 一台Rancher Agent，我们可以使用VMWare来安装两个虚拟机并在虚拟机里面安装好docker
	- rancher server 环境安装
	  进入到api后点击Quick Start Guide 找到 START RANCHER SERVER 就可以看到如下命令:sudo docker run -d --restart=unless-stopped -p 8080:8080 rancher/server:stable
	  在我们的虚拟机里面执行这个命令之前，我们先在虚拟机里面设置一下镜像加速器，如果不设置镜像加速器的话，拉取rancher镜像会非常非常慢，设置方法是：
	  vim /etc/docker/daemon.json
	  {
		"registry-mirrors": ["https://fy707np5.mirror.aliyuncs.com"]
	  }
	  修改完文件后执行一下两条命令使得镜像加速器生效
	  systemctl daemon-reload
	  systemctl restart docker
	  注意设置了镜像加速器之后，下一次再进入虚拟机要使用docker时，会报错，需要重新执行一下以上两条命令，这个镜像加速器应该是通用的
	  弄好之后执行sudo docker run -d --restart=unless-stopped -p 8080:8080 rancher/server:stable命令来安装并运行rancher容器
	  由于我们的虚拟机在安装时默认的防火墙是打开的，如果防火墙设置的是打开的话，记得要放开对应的8080端口
	  运行好rancher容器之后，我们就可以在本地的浏览器里面输入 http://虚拟机ip:8080/ 来访问rancher server的主页了，进入之后
	  在右下角设置成简体中文，第一次进入时，会在顶部出现一条提示信息让你添加一台安装了支持Docker版本的Linux主机，我们点击添加主机会出现当前站点的页面，就默认当前站点就好
	  然后点击保存，这时候就需要去配置Rancher Agent主机了,在这个页面我们选择Custom，其实在这个页面我们就已经能看到对rancher agent的要求了
	  构建好rancher agent 服务器之后，回到这个页面，在指定用于注册这台主机的公网IP一栏填写 rancher agent 服务器的ip地址，假设是192.168.134.130
	  然后“将下列脚本拷贝到每一台主机上运行以注册 Rancher” 一栏的内容会变，拷贝这一栏的内容到rancher agent 服务器去执行
	  执行完成之后去agent服务器查看运行的docker运行的容器，就会发现有一个agent容器。
	  回到Rancher Server页面，点击关闭，关闭之后页面会自动定位到基础架构-主机页面，我们就能在里面找到我们的ServerAgent
	- 菜单-Default-环境管理-所谓环境就是 开发-测试-生产 环境，rancher自身默认的环境编排工具是Cattle
	- 菜单-应用- 应用就是我们自己创建的应用了
	- 菜单-应用商店-就是rancher默认提供的一些现成的应用
	- 菜单-基础架构-就是主机、容器，镜像库等，值得注意的是存储，docker容器的数据是在容器被关闭之后数据就会丢失，如果想保留docker容器的数据，就可以通过存储提供的功能来实现了
	- 菜单-系统管理-就是用户和日志什么的
	- 添加应用和服务
	  - 镜像库 首先在基础机构-镜像库里面添加我们的阿里云私有镜像仓库，地址填写registry.cn-shenzhen.aliyuncs.com 然后是用户名密码
	  - 应用 然后在应用-用户-添加用户
	  - 服务 在对应的服务下面添加服务，输入服务名称镜像地址例如 registry.cn-shenzhen.aliyuncs.com/springcloud-namespace/config
	         然后端口映射是8080:8080 8080是在项目里面写的Dockerfile 那个EXPOSE 命令后面的端口号
		     添加完服务后，等待服务启动完成，我们就可以通过在浏览器里面输入 http://ServerAgentHost:8080/来访问对应的服务了
	  
	- rancher agent
	  安装另外一台虚拟机用于rancher agent ，这不需要做额外的设置，只需要保证与其他主机之间的UDP端口 500和4500端口是放开的即可，并且安装了docker
	  如果我们是使用的VMWare，那么就不用去管端口的事情了，因为VMWare虚拟机在创建时默认是将防火墙设置成关闭状态的
	
	- 配置eureka高可用,首先修改好eureka项目,需要application.yml、application-eureka1.yml、application-eureka2.yml 三个配置文件
	 然后使用bash build.sh重新将镜像推送到阿里云私有镜像仓库
	 然后去rancher的服务里面将原有的eureka服务删除,
	 然后重新添加eureka服务eureka1，端口映射8761:8761 环境变量 spring.profiles.active eureka1
	 然后重新添加eureka服务eureka2，端口映射8762:8762 环境变量 spring.profiles.active eureka2
	 然后修改config服务的配置，将eureka的defaultZone改成http://eureka1:8761/eureka1/,http://eureka2:8762/eureka/，重新推送config镜像到阿里云私有镜像库
	 然后在rancher的config服务后面点击升级即可，升级完成之后在服务列表页面点击config服务后面的升级完成
	 
	- 配置product高可用
	 首先需要修改配置文件，将application.yml配置文件里面的server.port配置给干掉
	 然后将Dockerfile文件里面的EXPOSE 9002 这一行干掉
	 然后构建镜像到阿里云私有镜像仓库并在rancher中建立服务，建立服务时不指定端口，
	 当服务运行起来后，在应用列表中点击product服务进入到product服务的详情页，然后在数量那儿点击+，每点一次+就会多启动一个product的docker容器，
	 从而实现动态扩容，负载均衡由eureka的ribbon负载均衡器来实现
	 
	- 配置api-gateway负载均衡器
	  在rancher添加好api-gateway服务后，在应用处选择添加应用-添加负载均衡器
	  填写好名称，并设置端口映射80:8080，选择应用为api-gateway .
	  然后去api-gateway详情页，在数量那儿点击 + 添加几台api-gateway即可
	
	  
	

  




  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

